name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r services/api/requirements.txt -r services/api/requirements-dev.txt
      - name: Lint (ruff)
        run: |
          ruff --version
          ruff check services/api
      - name: Test
        run: |
          pytest -q
      - name: Build SBOM (pip-audit + cyclonedx)
        run: |
          pip install pip-audit cyclonedx-bom
          pip-audit -r services/api/requirements.txt --progress-spinner off || true
          cyclonedx-py --e require --format json --outfile sbom-backend.json || true

  terraform:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
      - name: fmt & validate
        working-directory: infra/terraform
        run: |
          terraform init -backend=false
          terraform fmt -check
          terraform validate

  sast:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    steps:
      - uses: actions/checkout@v4
      - name: Run CodeQL (Python)
        uses: github/codeql-action/init@v3
        with:
          languages: python
      - uses: github/codeql-action/analyze@v3

  dast:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
      - name: Start API
        run: |
          python -m pip install --upgrade pip
          pip install -r services/api/requirements.txt
          nohup uvicorn services.api.app.main:app --host 0.0.0.0 --port 8000 &
          sleep 3
      - name: ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.13.0
        with:
          target: 'http://localhost:8000/healthz'
          rules_file_name: '.zap/rules.tsv'
        continue-on-error: true

  trivy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Trivy FS scan (vulnerabilities)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH,MEDIUM'
        continue-on-error: true

  grype:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
      - uses: actions/checkout@v4
      - name: Anchore Grype (SARIF)
        uses: anchore/scan-action@v5
        with:
          path: .
          fail-build: false
          output-format: sarif
          severity-cutoff: medium
      - name: Upload SARIF to code scanning
        uses: github/code-scanning/upload-sarif@v3
        with:
          sarif_file: results.sarif

name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:

jobs:
  api:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Set safe ENV defaults
        run: |
          echo "OCR_PROVIDER=stub" >> $GITHUB_ENV
          echo "OTLP_ENDPOINT=" >> $GITHUB_ENV
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r services/api/requirements.txt -r services/api/requirements-dev.txt
      - name: Lint (ruff)
        run: ruff --version && ruff check .
      - name: Format check (black)
        run: black --check services/api
      - name: Tests (pytest + coverage)
        run: |
          E2E_MAX_SECONDS=20 pytest --cov=services/api --cov-report=xml --cov-fail-under=75
      - name: WORM layout smoke test
        run: |
          python - <<'PY'
          from pathlib import Path
          # Ensure WORM layout root exists during CI
          root = Path('.worm_store')
          root.mkdir(exist_ok=True)
          # Simulate a doc digest path
          d = 'a'*64
          p = root / d[:2] / d[2:4]
          p.mkdir(parents=True, exist_ok=True)
          (p / f"{d}_doc.jpg").write_bytes(b'0')
          assert (p / f"{d}_doc.jpg").exists()
          print('WORM smoke ok')
          PY

  flutter:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
      - name: Create Flutter app if missing
        run: |
          if [ ! -d "apps/mobile_web_flutter" ]; then
            flutter create apps/mobile_web_flutter
          fi
      - name: Flutter pub get
        working-directory: apps/mobile_web_flutter
        run: flutter pub get
      - name: Generate (build_runner)
        working-directory: apps/mobile_web_flutter
        run: flutter pub run build_runner build --delete-conflicting-outputs
      - name: Flutter analyze
        working-directory: apps/mobile_web_flutter
        run: flutter analyze --no-fatal-infos --no-fatal-warnings
      - name: Flutter test
        working-directory: apps/mobile_web_flutter
        run: flutter test

  terraform:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
      - name: Terraform fmt
        working-directory: infra/terraform
        run: terraform fmt -check
      - name: Terraform validate
        working-directory: infra/terraform
        run: |
          terraform init -backend=false
          terraform validate


